// Generated by Haxe 4.1.5
#ifndef INCLUDED_ChartEditor
#define INCLUDED_ChartEditor

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(ChartEditor)
HX_DECLARE_CLASS0(Note)
HX_DECLARE_CLASS0(PlayState)
HX_DECLARE_CLASS0(Receptors)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES ChartEditor_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef ChartEditor_obj OBJ_;
		ChartEditor_obj();

	public:
		enum { _hx_ClassId = 0x398d2a4b };

		void __construct( ::Dynamic MaxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ChartEditor")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ChartEditor"); }
		static ::hx::ObjectPtr< ChartEditor_obj > __new( ::Dynamic MaxSize);
		static ::hx::ObjectPtr< ChartEditor_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ChartEditor_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ChartEditor",0b,e5,91,86); }

		static  ::flixel::group::FlxTypedGroup receptors;
		bool playing;
		 ::flixel::text::FlxText notWork;
		::cpp::VirtualArray savedNotes;
		 ::flixel::FlxSprite chartBG;
		 ::PlayState fromPlayState;
		 ::Receptors staticArrow;
		 ::Note daNote;
		 ::Note ghostNote;
		 ::flixel::group::FlxTypedGroup notes;
		 ::flixel::FlxSprite strumLine;
		 ::flixel::group::FlxTypedGroup playerStrums;
		void create();

		void generateArrow(int noteData,Float songPosition);
		::Dynamic generateArrow_dyn();

		void update(Float elapsed);

};


#endif /* INCLUDED_ChartEditor */ 
