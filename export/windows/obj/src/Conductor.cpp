// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9bd24c9adde08dff_1_new,"Conductor","new",0xc2a20839,"Conductor.new","Conductor.hx",1,0xeb0fa157)
HX_LOCAL_STACK_FRAME(_hx_pos_9bd24c9adde08dff_12_changeBPM,"Conductor","changeBPM",0xeafb6fe8,"Conductor.changeBPM","Conductor.hx",12,0xeb0fa157)
HX_LOCAL_STACK_FRAME(_hx_pos_9bd24c9adde08dff_6_boot,"Conductor","boot",0x833e2a39,"Conductor.boot","Conductor.hx",6,0xeb0fa157)
HX_LOCAL_STACK_FRAME(_hx_pos_9bd24c9adde08dff_7_boot,"Conductor","boot",0x833e2a39,"Conductor.boot","Conductor.hx",7,0xeb0fa157)
HX_LOCAL_STACK_FRAME(_hx_pos_9bd24c9adde08dff_8_boot,"Conductor","boot",0x833e2a39,"Conductor.boot","Conductor.hx",8,0xeb0fa157)

void Conductor_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9bd24c9adde08dff_1_new)
HXLINE(   4)		this->beat = ((Float)0);
HXLINE(   3)		this->bpm = 0;
            	}

Dynamic Conductor_obj::__CreateEmpty() { return new Conductor_obj; }

void *Conductor_obj::_hx_vtable = 0;

Dynamic Conductor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Conductor_obj > _hx_result = new Conductor_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Conductor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3ee4ed07;
}

int Conductor_obj::changeBPM(int bpm){
            	HX_STACKFRAME(&_hx_pos_9bd24c9adde08dff_12_changeBPM)
HXDLIN(  12)		return (this->bpm = bpm);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Conductor_obj,changeBPM,return )

int Conductor_obj::scrollSpeed;

Float Conductor_obj::songPosition;

Float Conductor_obj::startTime;


Conductor_obj::Conductor_obj()
{
}

::hx::Val Conductor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bpm") ) { return ::hx::Val( bpm ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"beat") ) { return ::hx::Val( beat ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"changeBPM") ) { return ::hx::Val( changeBPM_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Conductor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"startTime") ) { outValue = ( startTime ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"scrollSpeed") ) { outValue = ( scrollSpeed ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"songPosition") ) { outValue = ( songPosition ); return true; }
	}
	return false;
}

::hx::Val Conductor_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bpm") ) { bpm=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"beat") ) { beat=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Conductor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=ioValue.Cast< Float >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"scrollSpeed") ) { scrollSpeed=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"songPosition") ) { songPosition=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void Conductor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bpm",df,be,4a,00));
	outFields->push(HX_("beat",76,e1,13,41));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Conductor_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Conductor_obj,bpm),HX_("bpm",df,be,4a,00)},
	{::hx::fsFloat,(int)offsetof(Conductor_obj,beat),HX_("beat",76,e1,13,41)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Conductor_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Conductor_obj::scrollSpeed,HX_("scrollSpeed",3a,e0,46,cb)},
	{::hx::fsFloat,(void *) &Conductor_obj::songPosition,HX_("songPosition",9e,dd,3b,8d)},
	{::hx::fsFloat,(void *) &Conductor_obj::startTime,HX_("startTime",8f,45,f0,05)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Conductor_obj_sMemberFields[] = {
	HX_("bpm",df,be,4a,00),
	HX_("beat",76,e1,13,41),
	HX_("changeBPM",4f,4f,f8,1d),
	::String(null()) };

static void Conductor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Conductor_obj::scrollSpeed,"scrollSpeed");
	HX_MARK_MEMBER_NAME(Conductor_obj::songPosition,"songPosition");
	HX_MARK_MEMBER_NAME(Conductor_obj::startTime,"startTime");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Conductor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Conductor_obj::scrollSpeed,"scrollSpeed");
	HX_VISIT_MEMBER_NAME(Conductor_obj::songPosition,"songPosition");
	HX_VISIT_MEMBER_NAME(Conductor_obj::startTime,"startTime");
};

#endif

::hx::Class Conductor_obj::__mClass;

static ::String Conductor_obj_sStaticFields[] = {
	HX_("scrollSpeed",3a,e0,46,cb),
	HX_("songPosition",9e,dd,3b,8d),
	HX_("startTime",8f,45,f0,05),
	::String(null())
};

void Conductor_obj::__register()
{
	Conductor_obj _hx_dummy;
	Conductor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Conductor",c7,77,a1,7b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Conductor_obj::__GetStatic;
	__mClass->mSetStaticField = &Conductor_obj::__SetStatic;
	__mClass->mMarkFunc = Conductor_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Conductor_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Conductor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Conductor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Conductor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Conductor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Conductor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Conductor_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9bd24c9adde08dff_6_boot)
HXDLIN(   6)		scrollSpeed = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9bd24c9adde08dff_7_boot)
HXDLIN(   7)		songPosition = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_9bd24c9adde08dff_8_boot)
HXDLIN(   8)		startTime = ((Float)0);
            	}
}

