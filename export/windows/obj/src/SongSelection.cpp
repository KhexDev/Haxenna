// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_SongSelection
#include <SongSelection.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5ed6e212ec797557_6_new,"SongSelection","new",0x56e11a09,"SongSelection.new","SongSelection.hx",6,0x8a25b987)
HX_LOCAL_STACK_FRAME(_hx_pos_5ed6e212ec797557_11_create,"SongSelection","create",0xabeaccf3,"SongSelection.create","SongSelection.hx",11,0x8a25b987)
HX_LOCAL_STACK_FRAME(_hx_pos_5ed6e212ec797557_22_update,"SongSelection","update",0xb6e0ec00,"SongSelection.update","SongSelection.hx",22,0x8a25b987)

void SongSelection_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_5ed6e212ec797557_6_new)
HXDLIN(   6)		super::__construct(MaxSize);
            	}

Dynamic SongSelection_obj::__CreateEmpty() { return new SongSelection_obj; }

void *SongSelection_obj::_hx_vtable = 0;

Dynamic SongSelection_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SongSelection_obj > _hx_result = new SongSelection_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SongSelection_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5596a72b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x5596a72b;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void SongSelection_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_5ed6e212ec797557_11_create)
HXLINE(  12)		this->songName =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,null(),null(),null(),HX_("SHIT SONG",35,cc,f9,8f),50,null());
HXLINE(  13)		this->songName->set_color(-1);
HXLINE(  14)		this->songName->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  15)		this->songName->set_y(( (Float)(50) ));
HXLINE(  16)		this->add(this->songName);
HXLINE(  18)		this->super::create();
            	}


void SongSelection_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_5ed6e212ec797557_22_update)
HXLINE(  23)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  23)		if (_this->keyManager->checkStatus(13,_this->status)) {
HXLINE(  24)			 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN(  24)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  24)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE(  26)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< SongSelection_obj > SongSelection_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< SongSelection_obj > __this = new SongSelection_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< SongSelection_obj > SongSelection_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	SongSelection_obj *__this = (SongSelection_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SongSelection_obj), true, "SongSelection"));
	*(void **)__this = SongSelection_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

SongSelection_obj::SongSelection_obj()
{
}

void SongSelection_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SongSelection);
	HX_MARK_MEMBER_NAME(songName,"songName");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SongSelection_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(songName,"songName");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val SongSelection_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"songName") ) { return ::hx::Val( songName ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SongSelection_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"songName") ) { songName=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SongSelection_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("songName",c0,d0,d7,36));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SongSelection_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(SongSelection_obj,songName),HX_("songName",c0,d0,d7,36)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SongSelection_obj_sStaticStorageInfo = 0;
#endif

static ::String SongSelection_obj_sMemberFields[] = {
	HX_("songName",c0,d0,d7,36),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class SongSelection_obj::__mClass;

void SongSelection_obj::__register()
{
	SongSelection_obj _hx_dummy;
	SongSelection_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("SongSelection",97,61,df,0c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SongSelection_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SongSelection_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SongSelection_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SongSelection_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

