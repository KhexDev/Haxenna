// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Receptors
#include <Receptors.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_6_new,"Note","new",0x1cc75604,"Note.new","Note.hx",6,0x1a8855ec)
static const ::String _hx_array_data_33e34412_2[] = {
	HX_("purple",3c,f6,89,71),HX_("blue",9a,42,19,41),HX_("green",c3,0e,ed,99),HX_("red",51,d9,56,00),
};
static const ::String _hx_array_data_33e34412_3[] = {
	HX_("LEFT",07,d0,70,32),HX_("LEFT",07,d0,70,32),HX_("UP",5b,4a,00,00),HX_("RIGHT",bc,43,52,67),
};
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_68_update,"Note","update",0xca3a1ee5,"Note.update","Note.hx",68,0x1a8855ec)
HX_LOCAL_STACK_FRAME(_hx_pos_3be6f1ff2d789e96_19_boot,"Note","boot",0x09bcee0e,"Note.boot","Note.hx",19,0x1a8855ec)
static const Float _hx_array_data_33e34412_6[] = {
	(Float)600,(Float)100,
};

void Note_obj::__construct(Float x,Float y,int noteData,::String noteType,bool inCharter){
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_6_new)
HXLINE(  27)		this->dataColor = ::Array_obj< ::String >::fromData( _hx_array_data_33e34412_2,4);
HXLINE(  26)		this->data = ::Array_obj< ::String >::fromData( _hx_array_data_33e34412_3,4);
HXLINE(  31)		super::__construct(x,y,null());
HXLINE(  32)		this->noteData = noteData;
HXLINE(  33)		this->noteType = noteType;
HXLINE(  34)		this->inCharter = inCharter;
HXLINE(  35)		this->songPosition = y;
HXLINE(  37)		::String _hx_switch_0 = noteType;
            		if (  (_hx_switch_0==HX_("normal",27,72,69,30)) ){
HXLINE(  40)			this->set_frames(::Paths_obj::getSparrowAtlas(HX_("Arrows",aa,8a,8f,ec)));
HXDLIN(  40)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("strangerDanger",f9,36,58,12)) ){
HXLINE(  41)			goto _hx_goto_0;
            		}
            		_hx_goto_0:;
HXLINE(  43)		if (inCharter) {
HXLINE(  44)			this->setGraphicSize(::Std_obj::_hx_int((this->get_width() * ((Float)0.5))),null());
            		}
            		else {
HXLINE(  46)			this->setGraphicSize(::Std_obj::_hx_int((this->get_width() * ((Float)0.7))),null());
            		}
HXLINE(  48)		{
HXLINE(  50)			this->animation->addByPrefix(this->dataColor->__get(0),(this->dataColor->__get(0) + HX_(" alone",3b,76,01,ed)),1,false,null(),null());
HXDLIN(  50)			this->animation->addByPrefix(this->dataColor->__get(1),(this->dataColor->__get(1) + HX_(" alone",3b,76,01,ed)),1,false,null(),null());
HXDLIN(  50)			this->animation->addByPrefix(this->dataColor->__get(2),(this->dataColor->__get(2) + HX_(" alone",3b,76,01,ed)),1,false,null(),null());
HXDLIN(  50)			this->animation->addByPrefix(this->dataColor->__get(3),(this->dataColor->__get(3) + HX_(" alone",3b,76,01,ed)),1,false,null(),null());
            		}
HXLINE(  53)		switch((int)(noteData)){
            			case (int)0: {
HXLINE(  56)				this->animation->play(HX_("purple",3c,f6,89,71),null(),null(),null());
            			}
            			break;
            			case (int)1: {
HXLINE(  58)				this->animation->play(HX_("blue",9a,42,19,41),null(),null(),null());
            			}
            			break;
            			case (int)2: {
HXLINE(  60)				this->animation->play(HX_("green",c3,0e,ed,99),null(),null(),null());
            			}
            			break;
            			case (int)3: {
HXLINE(  62)				this->animation->play(HX_("red",51,d9,56,00),null(),null(),null());
            			}
            			break;
            		}
            	}

Dynamic Note_obj::__CreateEmpty() { return new Note_obj; }

void *Note_obj::_hx_vtable = 0;

Dynamic Note_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Note_obj > _hx_result = new Note_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Note_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x08363a36) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x08363a36;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Note_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_68_update)
HXLINE(  69)		if (!(this->inCharter)) {
HXLINE(  71)			bool _hx_tmp;
HXDLIN(  71)			if ((this->y <= (Dynamic( ::PlayState_obj::receptors->members->__get(this->noteData)).StaticCast<  ::Receptors >()->y + ::Note_obj::hitZone->__get(0)))) {
HXLINE(  71)				_hx_tmp = (this->y >= (Dynamic( ::PlayState_obj::receptors->members->__get(this->noteData)).StaticCast<  ::Receptors >()->y - ::Note_obj::hitZone->__get(1)));
            			}
            			else {
HXLINE(  71)				_hx_tmp = false;
            			}
HXDLIN(  71)			if (_hx_tmp) {
HXLINE(  72)				this->canBeHit = true;
            			}
            			else {
HXLINE(  74)				this->canBeHit = false;
            			}
            		}
HXLINE(  77)		if (this->goodHit) {
HXLINE(  78)			this->lastPosition = this->y;
            		}
HXLINE(  80)		this->super::update(elapsed);
            	}


::Array< Float > Note_obj::hitZone;


::hx::ObjectPtr< Note_obj > Note_obj::__new(Float x,Float y,int noteData,::String noteType,bool inCharter) {
	::hx::ObjectPtr< Note_obj > __this = new Note_obj();
	__this->__construct(x,y,noteData,noteType,inCharter);
	return __this;
}

::hx::ObjectPtr< Note_obj > Note_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y,int noteData,::String noteType,bool inCharter) {
	Note_obj *__this = (Note_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Note_obj), true, "Note"));
	*(void **)__this = Note_obj::_hx_vtable;
	__this->__construct(x,y,noteData,noteType,inCharter);
	return __this;
}

Note_obj::Note_obj()
{
}

void Note_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Note);
	HX_MARK_MEMBER_NAME(inCharter,"inCharter");
	HX_MARK_MEMBER_NAME(wasHit,"wasHit");
	HX_MARK_MEMBER_NAME(canBeHit,"canBeHit");
	HX_MARK_MEMBER_NAME(goodHit,"goodHit");
	HX_MARK_MEMBER_NAME(rating,"rating");
	HX_MARK_MEMBER_NAME(songPosition,"songPosition");
	HX_MARK_MEMBER_NAME(isSus,"isSus");
	HX_MARK_MEMBER_NAME(danger,"danger");
	HX_MARK_MEMBER_NAME(noteData,"noteData");
	HX_MARK_MEMBER_NAME(noteType,"noteType");
	HX_MARK_MEMBER_NAME(lastPosition,"lastPosition");
	HX_MARK_MEMBER_NAME(prevNote,"prevNote");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(dataColor,"dataColor");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Note_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(inCharter,"inCharter");
	HX_VISIT_MEMBER_NAME(wasHit,"wasHit");
	HX_VISIT_MEMBER_NAME(canBeHit,"canBeHit");
	HX_VISIT_MEMBER_NAME(goodHit,"goodHit");
	HX_VISIT_MEMBER_NAME(rating,"rating");
	HX_VISIT_MEMBER_NAME(songPosition,"songPosition");
	HX_VISIT_MEMBER_NAME(isSus,"isSus");
	HX_VISIT_MEMBER_NAME(danger,"danger");
	HX_VISIT_MEMBER_NAME(noteData,"noteData");
	HX_VISIT_MEMBER_NAME(noteType,"noteType");
	HX_VISIT_MEMBER_NAME(lastPosition,"lastPosition");
	HX_VISIT_MEMBER_NAME(prevNote,"prevNote");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(dataColor,"dataColor");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Note_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"isSus") ) { return ::hx::Val( isSus ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"wasHit") ) { return ::hx::Val( wasHit ); }
		if (HX_FIELD_EQ(inName,"rating") ) { return ::hx::Val( rating ); }
		if (HX_FIELD_EQ(inName,"danger") ) { return ::hx::Val( danger ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"goodHit") ) { return ::hx::Val( goodHit ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"canBeHit") ) { return ::hx::Val( canBeHit ); }
		if (HX_FIELD_EQ(inName,"noteData") ) { return ::hx::Val( noteData ); }
		if (HX_FIELD_EQ(inName,"noteType") ) { return ::hx::Val( noteType ); }
		if (HX_FIELD_EQ(inName,"prevNote") ) { return ::hx::Val( prevNote ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inCharter") ) { return ::hx::Val( inCharter ); }
		if (HX_FIELD_EQ(inName,"dataColor") ) { return ::hx::Val( dataColor ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"songPosition") ) { return ::hx::Val( songPosition ); }
		if (HX_FIELD_EQ(inName,"lastPosition") ) { return ::hx::Val( lastPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Note_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"hitZone") ) { outValue = ( hitZone ); return true; }
	}
	return false;
}

::hx::Val Note_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"isSus") ) { isSus=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"wasHit") ) { wasHit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rating") ) { rating=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"danger") ) { danger=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"goodHit") ) { goodHit=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"canBeHit") ) { canBeHit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteData") ) { noteData=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteType") ) { noteType=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prevNote") ) { prevNote=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"inCharter") ) { inCharter=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dataColor") ) { dataColor=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"songPosition") ) { songPosition=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastPosition") ) { lastPosition=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Note_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"hitZone") ) { hitZone=ioValue.Cast< ::Array< Float > >(); return true; }
	}
	return false;
}

void Note_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("inCharter",66,ab,7d,b5));
	outFields->push(HX_("wasHit",aa,bc,90,ba));
	outFields->push(HX_("canBeHit",20,a6,d1,1e));
	outFields->push(HX_("goodHit",16,8d,8a,48));
	outFields->push(HX_("rating",1d,34,8a,bb));
	outFields->push(HX_("songPosition",9e,dd,3b,8d));
	outFields->push(HX_("isSus",c7,d3,55,c1));
	outFields->push(HX_("danger",e3,52,92,1e));
	outFields->push(HX_("noteData",3c,7b,96,51));
	outFields->push(HX_("noteType",cc,17,3c,5c));
	outFields->push(HX_("lastPosition",1f,ad,8c,2c));
	outFields->push(HX_("prevNote",85,f8,d7,11));
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("dataColor",d9,f2,4b,90));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Note_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Note_obj,inCharter),HX_("inCharter",66,ab,7d,b5)},
	{::hx::fsBool,(int)offsetof(Note_obj,wasHit),HX_("wasHit",aa,bc,90,ba)},
	{::hx::fsBool,(int)offsetof(Note_obj,canBeHit),HX_("canBeHit",20,a6,d1,1e)},
	{::hx::fsBool,(int)offsetof(Note_obj,goodHit),HX_("goodHit",16,8d,8a,48)},
	{::hx::fsString,(int)offsetof(Note_obj,rating),HX_("rating",1d,34,8a,bb)},
	{::hx::fsFloat,(int)offsetof(Note_obj,songPosition),HX_("songPosition",9e,dd,3b,8d)},
	{::hx::fsBool,(int)offsetof(Note_obj,isSus),HX_("isSus",c7,d3,55,c1)},
	{::hx::fsBool,(int)offsetof(Note_obj,danger),HX_("danger",e3,52,92,1e)},
	{::hx::fsInt,(int)offsetof(Note_obj,noteData),HX_("noteData",3c,7b,96,51)},
	{::hx::fsString,(int)offsetof(Note_obj,noteType),HX_("noteType",cc,17,3c,5c)},
	{::hx::fsFloat,(int)offsetof(Note_obj,lastPosition),HX_("lastPosition",1f,ad,8c,2c)},
	{::hx::fsFloat,(int)offsetof(Note_obj,prevNote),HX_("prevNote",85,f8,d7,11)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Note_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Note_obj,dataColor),HX_("dataColor",d9,f2,4b,90)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Note_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(void *) &Note_obj::hitZone,HX_("hitZone",1f,3a,7e,e6)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Note_obj_sMemberFields[] = {
	HX_("inCharter",66,ab,7d,b5),
	HX_("wasHit",aa,bc,90,ba),
	HX_("canBeHit",20,a6,d1,1e),
	HX_("goodHit",16,8d,8a,48),
	HX_("rating",1d,34,8a,bb),
	HX_("songPosition",9e,dd,3b,8d),
	HX_("isSus",c7,d3,55,c1),
	HX_("danger",e3,52,92,1e),
	HX_("noteData",3c,7b,96,51),
	HX_("noteType",cc,17,3c,5c),
	HX_("lastPosition",1f,ad,8c,2c),
	HX_("prevNote",85,f8,d7,11),
	HX_("data",2a,56,63,42),
	HX_("dataColor",d9,f2,4b,90),
	HX_("update",09,86,05,87),
	::String(null()) };

static void Note_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Note_obj::hitZone,"hitZone");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Note_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Note_obj::hitZone,"hitZone");
};

#endif

::hx::Class Note_obj::__mClass;

static ::String Note_obj_sStaticFields[] = {
	HX_("hitZone",1f,3a,7e,e6),
	::String(null())
};

void Note_obj::__register()
{
	Note_obj _hx_dummy;
	Note_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Note",12,44,e3,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Note_obj::__GetStatic;
	__mClass->mSetStaticField = &Note_obj::__SetStatic;
	__mClass->mMarkFunc = Note_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Note_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Note_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Note_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Note_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Note_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Note_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Note_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_3be6f1ff2d789e96_19_boot)
HXDLIN(  19)		hitZone = ::Array_obj< Float >::fromData( _hx_array_data_33e34412_6,2);
            	}
}

